package com.qcx.util.httpAsync;

import static org.asynchttpclient.Dsl.asyncHttpClient;

import java.io.IOException;

import io.netty.channel.EventLoopGroup;
import io.netty.channel.epoll.EpollEventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;

import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.DefaultAsyncHttpClientConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class HttpAsyncClient {
	
	private static Logger log = LoggerFactory.getLogger(HttpAsyncClient.class);
	
    private static final int connectTimeoutMilliseconds = 5000;
    private static final int requestTimeoutMilliseconds = 5000;
    private static final int readTimeoutTimeoutMilliseconds = 5000;
    private static final int maxRequestRetry = 2;
    private static EventLoopGroup eventLoopGroup;

    private static AsyncHttpClient asyncHttpClient;
    
    
    private HttpAsyncClient() {
    }

    public static AsyncHttpClient getInstance() {
        if (asyncHttpClient == null) {
            synchronized (AsyncHttpClient.class) {
                if (asyncHttpClient == null) {
                	asyncHttpClient = asyncHttpClient(initConfig());
                	log.info("===HttpAsyncClient初始化完成===");
                }
            }
        }
        return asyncHttpClient;
    }
    

    private static AsyncHttpClientConfig initConfig() {
    	
        String osName = System.getProperty("os.name");
        if ("Linux".equalsIgnoreCase(osName)) {
            eventLoopGroup = new EpollEventLoopGroup();
        } else {
            eventLoopGroup = new NioEventLoopGroup();
        }
        AsyncHttpClientConfig asyncHttpClientConfig = new DefaultAsyncHttpClientConfig
                .Builder()
                .setConnectTimeout(connectTimeoutMilliseconds)
                .setRequestTimeout(requestTimeoutMilliseconds)
                .setReadTimeout(readTimeoutTimeoutMilliseconds)
                .setEventLoopGroup(eventLoopGroup)
                //设置信任所有ssl
                .setUseInsecureTrustManager(true)
                .setMaxRequestRetry(maxRequestRetry)
                .build();
        return asyncHttpClientConfig;
    }

    
    public static void shutdown() {
        if (asyncHttpClient != null) {
            try {
                asyncHttpClient.close();
                eventLoopGroup.shutdownGracefully();
            } catch (IOException exception) {
            	log.error("===HttpAsyncClient关闭异常===",exception);
            }
        }
    }

    
}
